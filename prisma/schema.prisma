generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum LocationType {
  WFO
  WFA
}

enum LocationStatus {
  ACTIVE
  INACTIVE
}

enum ShiftType {
  OFF
  MORNING
  AFTERNOON
  EVENING
  CUSTOM
}

enum Role {
  ADMIN
  COORDINATOR
  EMPLOYEE
  USER
}

enum FrequencyType {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
  ONCE
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  PERMISSION
  ALPHA
}

enum ShiftChangeStatus {
  PENDING          
  PENDING_TARGET   
  PENDING_ADMIN    
  APPROVED
  REJECTED
}

model SystemConfig {
  id           Int     @id @default(autoincrement())
  allWfaActive Boolean @default(false)
  updatedAt    DateTime @updatedAt
}

/// Division / Lokasi Kerja
model Division {
  id        Int            @id @default(autoincrement())
  name      String
  location  String?
  longitude Float?
  latitude  Float?
  radius    Float?
  type      LocationType   @default(WFO)
  status    LocationStatus @default(INACTIVE)
  startTime Int?
  endTime   Int?
  parentId  Int?
  parent    Division?        @relation("DivisionHierarchy", fields: [parentId], references: [id])
  branches  Division[]       @relation("DivisionHierarchy")

  users     User[]
  shifts    Shift[]
  schedules Schedule[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/// User
model User {
  id       Int    @id @default(autoincrement())
  name     String
  email    String @unique
  password String
  role     Role   @default(USER)

  divisionId Int?
  shiftId  Int?

  division Division? @relation(fields: [divisionId], references: [id], onDelete: SetNull)
  shift  Shift?  @relation("ShiftUsers", fields: [shiftId], references: [id])

  customShifts       UserShiftAssignment[]
  schedules          SchedulesOnUsers[]
  attendances        Attendance[]

  shiftRequests        ShiftChangeRequest[] @relation("RequestedUser")     
  createdRequests      ShiftChangeRequest[] @relation("RequestedByAdmin")  
  targetShiftRequests  ShiftChangeRequest[] @relation("TargetUser")        

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/// Waktu Shift
model Shift {
  id        Int       @id @default(autoincrement())
  name      String
  type      ShiftType
  startTime Int
  endTime   Int
  isActive  Boolean   @default(true)

  divisionId Int?
  division   Division? @relation(fields: [divisionId], references: [id])

  users              User[]                @relation("ShiftUsers")
  assignments        UserShiftAssignment[]
  attendances        Attendance[]

  scheduleDatesPrimary   ScheduleDate[] @relation("PrimaryShift")
  scheduleDatesSecondary ScheduleDate[] @relation("SecondaryShift")

  oldShiftRequests     ShiftChangeRequest[] @relation("OldShift")
  newShiftRequests     ShiftChangeRequest[] @relation("NewShift")
  targetShiftRequests  ShiftChangeRequest[] @relation("TargetShift")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/// Schedule massal / individu
model Schedule {
  id          Int           @id @default(autoincrement())
  title       String
  description String?
  frequency   FrequencyType @default(ONCE)
  startDate   DateTime?
  startTime   String?
  endDate     DateTime?
  endTime     String?
  divisionId    Int?

  division  Division? @relation(fields: [divisionId], references: [id])
  
  users   SchedulesOnUsers[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/// 
model SchedulesOnUsers {
  id         Int @id @default(autoincrement())
  scheduleId Int
  userId     Int

  schedule Schedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([scheduleId, userId])
}

/// Hari spesifik jadwal
model ScheduleDate {
  id            Int      @id @default(autoincrement())
  scheduleId    Int
  date          DateTime
  shiftId       Int?
  secondShiftId Int?

  shift       Shift?   @relation("PrimaryShift", fields: [shiftId], references: [id])
  secondShift Shift?   @relation("SecondaryShift", fields: [secondShiftId], references: [id])

  @@unique([scheduleId, date])
}

/// Custom Shift
model UserShiftAssignment {
  id         Int      @id @default(autoincrement())
  userId     Int
  shiftId    Int
  assignedAt DateTime @default(now())

  user  User  @relation(fields: [userId], references: [id])
  shift Shift @relation(fields: [shiftId], references: [id], onDelete: Cascade)

  @@unique([userId, shiftId])
}

/// Absensi
model Attendance {
  id           Int              @id @default(autoincrement())
  date         DateTime
  status       AttendanceStatus @default(ABSENT)
  approval     ApprovalStatus?  
  reason       String?
  adminReason  String?
  checkInTime  DateTime?
  checkOutTime DateTime?
  userId       Int
  shiftId      Int

  user  User  @relation(fields: [userId], references: [id])
  shift Shift @relation(fields: [shiftId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, shiftId, date])
}

model ShiftChangeRequest {
  id              Int       @id @default(autoincrement())

  user            User      @relation("RequestedUser", fields: [userId], references: [id])
  userId          Int

  requestedBy     User      @relation("RequestedByAdmin", fields: [requestedById], references: [id])
  requestedById   Int

  targetUser      User?     @relation("TargetUser", fields: [targetUserId], references: [id])
  targetUserId    Int?

  oldShift        Shift?    @relation("OldShift", fields: [oldShiftId], references: [id])
  oldShiftId      Int?

  newShift        Shift?    @relation("NewShift", fields: [newShiftId], references: [id])
  newShiftId      Int?

  targetShift     Shift?    @relation("TargetShift", fields: [targetShiftId], references: [id])
  targetShiftId   Int?

  reason          String
  rejectReason    String?
  startDate       DateTime
  endDate         DateTime?
  status          ShiftChangeStatus @default(PENDING_TARGET)

  verifiedByTarget Boolean  @default(false)
  verifiedByAdmin  Boolean  @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


